package server.command.turn;

import server.command.CommandManager;
import server.game.GameManager;
import server.game.IGameManager;
import share.cards.Card;
import share.cards.effects.TypeEffectBasique;
import share.utils.Printer;

import java.util.List;
import java.util.UUID;

/**
 * The type Trigger exploit turn player.
 */
public class TriggerExploitTurnPlayer extends CommandActionTurn {

    /**
     * Instantiates a new Trigger exploit turn player.
     *
     * @param context the context
     * @param manager the manager
     */
    public TriggerExploitTurnPlayer(IGameManager context, CommandManager manager) {
        super(context, manager, "TRIGGER_EXPLOIT_TURN_PLAYER");
    }

    /**
     * Trigger exploit cards of current player.
     */
    @Override
    public void onExecute() {
        // get exploit cards of player
        List<Card> cardsPlayer = this.getCurrentPlayer().getInventory().getCardsByTypeEffect(TypeEffectBasique.REINFORCEMENT);
        if(cardsPlayer == null) return; //if not exist return
        for(Card c : cardsPlayer){ // else trigger all cards player
            this.getContext().getStats().incNbActionCardRenfort(idPlayer);
            Printer.getInstance().printCommand(this.getName(),"TRIGGER ACTION OF CARD "+c+" FOR PLAYER "+idPlayer, this.getStack());
            this.executeCommandCard(c, idPlayer);
        }
    }

    /**
     * Trigger card command.
     *
     * @param c Card object
     * @param idPlayer id session player
     */
    private void executeCommandCard(Card c, UUID idPlayer){
        Printer.getInstance().printCommand(this.getName(),"TRIGGER COMMAND CARD EXPLOIT ",this.getStack());
        this.getManager().triggerCommandActionCard(idPlayer,c);
    }
}

