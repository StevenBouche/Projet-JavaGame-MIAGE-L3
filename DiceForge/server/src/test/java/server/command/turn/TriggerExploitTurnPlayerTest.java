package server.command.turn;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import server.command.Command;
import server.command.CommandManager;
import server.command.turn.TriggerExploitTurnPlayer;
import server.game.GameManager;
import server.game.INotifyEvent;
import share.cards.Card;
import share.cards.Cards;
import share.cards.FactoryCard;
import share.cards.effects.TypeEffectBasique;
import share.eventclientserver.Events;
import share.face.FactoryFace;

import java.util.List;
import java.util.UUID;

import static org.mockito.Matchers.any;

class TriggerExploitTurnPlayerTest {

    CommandManager managerCmd;
    GameManager manager;
    UUID idPlayer;
    TriggerExploitTurnPlayer cmd;

    @BeforeEach
    void initTest(){
        FactoryFace.resetInstance();
        idPlayer = UUID.randomUUID();
        INotifyEvent callback = Mockito.mock(INotifyEvent.class);
        manager = new GameManager(callback);
        manager = Mockito.spy(manager);
        managerCmd = (CommandManager) Mockito.spy(manager.commandManager);
        manager.notifyConnectionPlayer(idPlayer, "str",0);
        Mockito.doNothing().when(manager).sendEventToClient(any(UUID.class), any(Events.class), any(Object.class));
        Mockito.doNothing().when(managerCmd).onEndExecute(any(Command.class));
        Mockito.doNothing().when(managerCmd).triggerCommand(any(Command.class));
    }

    @Test
    void onExecute(){
        manager.getGame().currentPlayer = manager.getGame().getPlayer(idPlayer);
        Card c = FactoryCard.createXInstanceOfCard(Cards.DOE,1).get(0);
        Card c1 = FactoryCard.createXInstanceOfCard(Cards.ANCIENT,1).get(0);
        Card c2 = FactoryCard.createXInstanceOfCard(Cards.HAMMER,1).get(0);
        manager.getGame().getPlayer(idPlayer).getInventory().addCard(c.typeEffect,c);
        manager.getGame().getPlayer(idPlayer).getInventory().addCard(c1.typeEffect,c1);
        cmd = new TriggerExploitTurnPlayer(manager,managerCmd);
        cmd.trigger();
        List<Card> cardsPlayer = manager.getGame().currentPlayer.getInventory().getCardsByTypeEffect(TypeEffectBasique.REINFORCEMENT);
        for(Card cc : cardsPlayer){
            Mockito.verify(managerCmd).triggerCommandActionCard(idPlayer,cc);
        }
    }
}