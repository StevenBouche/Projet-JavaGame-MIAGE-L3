package share.choice;


import share.dice.Dice;
import share.forge.Pool;
import share.inventory.InventoryElement;
import share.ressource.TypeRessource;
import share.temple.Island;
import share.temple.IslandEnum;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;

/**
 * The type Choice nothing share.forge exploit.
 */
public class ChoiceNothingForgeExploit extends Choice {

    /**
     * The D 1.
     */
    public Dice d1;
    /**
     * The D 2.
     */
    public  Dice d2;

    /**
     * The Choice.
     */
    public EnumTypeChoice choice;
    /**
     * The Pool share.forge.
     */
    public Map<Integer, Pool> poolForge;


    /**
     * The List island temple.
     */
    public EnumMap<IslandEnum, Island> listIslandTemple;

    /**
     * The Ressource of player.
     */
    public Map<TypeRessource, InventoryElement> ressourceOfPlayer;

    public List<ChoiceFaceOnDice> listChoiceForge;
    /**
     * The Choice island.
     */
    public IslandEnum choiceIsland;
    /**
     * The Choice index island case.
     */
    public int choiceIndexIslandCase;

    /**
     * Instantiates a new Choice nothing share.forge exploit.
     *
     * @param d1             the d 1
     * @param d2             the d 2
     * @param pool           the pool
     * @param valueRessource the value ressource
     * @param listIsland     the list island
     */
    public ChoiceNothingForgeExploit(Dice d1, Dice d2, Map<Integer, Pool> pool, Map<TypeRessource, InventoryElement> valueRessource, EnumMap<IslandEnum, Island> listIsland){
        this.d1 = d1;
        this.d2 = d2;
        this.listChoiceForge = new ArrayList<>();
        this.ressourceOfPlayer = valueRessource;
        this.listIslandTemple = listIsland;
        this.choice = EnumTypeChoice.NO_CHOICE;
        this.poolForge = pool;
    }

    /**
     * Instantiates a new Choice nothing share.forge exploit.
     */
    public ChoiceNothingForgeExploit(){
        super();
    }




}
